// Definimos los pines para cada color del LED RGB
const int redPin = 10;
const int greenPin = 9;
const int bluePin = 8;
#define dirPin 2
#define stepPin 3
#define aceptar 4 // Pin del pulsador para girar en sentido de las agujas del reloj
#define stepsPerRevolution 212
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2); 
int distancia = 0; // Declaración de variable global
const int potPin = A1;

void setup() {
  lcd.init();
  lcd.backlight();
  Serial.begin(9600);

  // Declara los pines como salida o entrada:
  pinMode(stepPin, OUTPUT);
  pinMode(dirPin, OUTPUT);
  pinMode(aceptar, INPUT_PULLUP); // Pulsador con resistencia pull-up interna
  // colores
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
}
void loop() {
  setColor(0, 0, 255);
  char buffer[4];
  // Imprime el valor inicial
  lcd.setCursor(0, 0);
  lcd.print("Distancia:");
  lcd.setCursor(2, 1);
  sprintf(buffer, "%02d", distancia);
  lcd.print(buffer);

  // Lee el valor del potenciometro
  int potValue = analogRead(potPin);

  // Mapear el valor del potenciómetro (0-1023) a la distancia (0-35 cm)
  int mappedDistancia = map(potValue, 0, 1023, 0, 37);

  int distancia_recorrida = mappedDistancia;

  int estado_aceptar = digitalRead(aceptar);

  
  sprintf(buffer, "%02d", distancia_recorrida);
  lcd.setCursor(2, 1);
  lcd.print(buffer);

  if (estado_aceptar == LOW){
    Serial.println("Botón aceptar presionado");
    while (distancia != distancia_recorrida) {
      Serial.print("Distancia actual: ");
      Serial.println(distancia);
      Serial.print("Distancia objetivo: ");
      Serial.println(distancia_recorrida);
      if (distancia_recorrida > distancia){
        setColor(0, 255, 0); //Greem
        digitalWrite(dirPin, LOW);
        moveMotor();
        distancia += 1;
      } else {
        digitalWrite(dirPin, HIGH);
        setColor(255, 0, 0); //Rojo
        moveMotor();
        distancia -= 1;
      }
    }
  }
  setColor(0, 0, 0); // Rojo máximo, Verde y Azul apagados
}
void moveMotor() {
  // Haz girar el motor 5 revoluciones rápidamente:
  for (int i = 0; i < 5 * stepsPerRevolution; i++) {
    // Estas cuatro líneas resultan en 1 paso:
    digitalWrite(stepPin, HIGH);
    delayMicroseconds(900);
    digitalWrite(stepPin, LOW);
    delayMicroseconds(900);
  }
}
// Función para establecer el color del LED RGB
void setColor(int red, int green, int blue) {
  analogWrite(redPin, red);
  analogWrite(greenPin, green);
  analogWrite(bluePin, blue);
}
